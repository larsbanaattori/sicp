#lang sicp

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        ; CHANGES START
        ((and (sum? a1) (sum? a2))
         (append '(+) (cdr a1) (cdr a2)))
        ((sum? a1)
         (append a1 (list a2)))
        ((sum? a2)
         (append a2 (list a1)))
        ; CHANGES END
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        ; CHANGES START
        ((and (product? m1) (product? m2))
         (append '(*) (cdr m1) (cdr m2)))
        ((product? m1)
         (append m1 (list m2)))
        ((product? m2)
         (append m2 (list m1)))
        ; CHANGES END
        (else (list '* m1 m2))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s)
  ; CHANGES START
  (if (> (length s) 3)
      (cons '+ (cddr s))
      (caddr s))
  ; CHANGES END
  )
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  ; CHANGES START
  (if (> (length p) 3)
      (cons '* (cddr p))
      (caddr p))
  ; CHANGES END
  )
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (make-exponentiation base exp)
  (cond ((=number? exp 0) 1)
        ((=number? base 0) 0)
        ((=number? exp 1) base)
        ((number? base) (number? exp) (expt base exp))
        (else (list '** base exp))))
(define (base e) (cadr e))
(define (exponent e) (caddr e))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
          (make-product
           (exponent exp)
           (make-exponentiation
            (base exp)
            (make-sum (exponent exp) -1)))
          (deriv (base exp) var)))
        (else
         (error "unknown expression type: DERIV" exp))))

; Write new tests
(define s1 '(+ x y))
(define s2 '(+ x y z))
(define s3 '(+ (** x 2) (** x 2) (* x y)))
(deriv s1 'x)
(deriv s2 'x)
(deriv s3 'x)
(newline)
(define p1 '(* x y))
(define p2 '(* x y z))
(define p3 '(* x (** x 2) (* x x y)))
(deriv p1 'x)
(deriv p2 'x)
(deriv p3 'x)
